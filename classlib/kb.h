#ifndef __KB_HEADER
#define __KB_HEADER

/*
 * 1  ^  TOP        60
 * 2  -> RIGHT      61
 * 3  v  DOWN       62
 * 4  <- LEFT       64
 * 5  Home          6E
 * 6  End           6F
 * 7  F12
 * 8  BkSpc         0E
 * 9  Tab           0F
 * 10 Enter         1C
 * ----------------------------------
 * 11-F1  | 14-F4  | 17-F7  | 20-F10
 * 12-F2  | 15-F5  | 18-F8  | 21-F11
 * 13-F3  | 16-F6  | 19-F9  |  7-F12
 * ----------------------------------
 * 22 PgUp          ~55
 * 23 PgDn          ~56
 * 24 Del           ~59
 * 25 Ins           ~5A
 * 26 NumLock        45
 * 27 Esc            01
 * 28 Win           ~5B
 * */

// Список скан-кодов ASCII для специальных клавиш
enum KeyBoardScanCodes {

    VK_UP           = 0x01,
    VK_RIGHT        = 0x02,
    VK_DOWN         = 0x03,
    VK_LEFT         = 0x04,
    VK_HOME         = 0x05,
    VK_END          = 0x06,
    VK_BACKSPACE    = 0x08,
    VK_TAB          = 0x09,
    VK_ENTER        = 0x0A,
    VK_F1           = 0x0B,
    VK_F2           = 0x0C,
    VK_F3           = 0x0D,
    VK_F4           = 0x0E,
    VK_F5           = 0x0F,
    VK_F6           = 0x10,
    VK_F7           = 0x11,
    VK_F8           = 0x12,
    VK_F9           = 0x13,
    VK_F10          = 0x14,
    VK_F11          = 0x15,
    VK_F12          = 0x07,
    VK_PGUP         = 0x16,
    VK_PGDN         = 0x17,
    VK_DEL          = 0x18,
    VK_INS          = 0x19,
    VK_NUMLOCK      = 0x1A,
    VK_ESC          = 0x1B,
    VK_WIN          = 0x1C,

};

 // @todo добавить спецклавиши (и их трансляции)

// Перевод XT -> ASCII
static const unsigned char keymap[2][0x80] =
{
    {
    //   0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
         0,  27,  '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '=',  8,   9,   // 0x
        'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', '[', ']',  10,  0,  'a', 's',  // 1x
        'd', 'f', 'g', 'h', 'j', 'k', 'l', ';', '\'','`',  0,  0x5C, 'z', 'x', 'c', 'v', // 2x
        'b', 'n', 'm', ',', '.', '/',  0,  '*',  0,  ' ',  0,  11,  12,  13,  14,  15,   // 3x
        16,  17,  18,  19,  20,  26,   0,  '7', '8', '9', '-', '4', '5', '6', '+', '1',  // 4x
        '2', '3', '0', '.',  0,  22,  23,  21,   7,  24,  25,  28,   0,   0,   0,   0,   // 5x
         1,   2,   3,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   6,   // 6x
         0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0    // 7x
    },
    {
   //    0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
         0,  27,  '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+',  8,   9,   // 0x
        'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P', '{', '}',  10,  0,  'A', 'S',  // 1x
        'D', 'F', 'G', 'H', 'J', 'K', 'L', ':', '"', '~',  0,  '|', 'Z', 'X', 'C', 'V',  // 2x
        'B', 'N', 'M', '<', '>', '?',  0,   0,   0,  ' ',  0,  0,    1,   2,   3,   4,   // 3x
        16,  17,  18,  19,  20,  26,   0,  '7', '8', '9', '-', '4', '5', '6', '+', '1',  // 4x
        '2', '3', '0', '.',  0,  22,  23,  21,  22,  24,  25,  28,   0,   0,   0,   0,   // 5x
         1,   2,   3,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   6,   // 6x
         0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0    // 7x
    }
};
#endif
